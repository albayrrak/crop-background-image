{"version":3,"sources":["../src/index.ts"],"sourcesContent":["interface IRGBA {\r\n  red: number;\r\n  green: number;\r\n  blue: number;\r\n  alfa: number;\r\n}\r\n\r\nexport class CropImageHelper {\r\n  private data: any = {};\r\n  private imageUrl: string | undefined;\r\n  private image: HTMLImageElement;\r\n\r\n  constructor(imageUrl: string) {\r\n    this.imageUrl = imageUrl;\r\n    this.image = new Image();\r\n  }\r\n\r\n  cropImage(): Promise<string> {\r\n    var image: HTMLImageElement = new Image();\r\n    var fillCanvas = this.fillCanvas.bind(this);\r\n\r\n    var canvas = document.createElement(\"canvas\") as HTMLCanvasElement;\r\n    var context: CanvasRenderingContext2D = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\n    document.body.appendChild(canvas);\r\n    canvas.style.display = \"none\";\r\n\r\n    this.image = image;\r\n    image.crossOrigin = \"Anonymous\";\r\n    image.src = this.imageUrl as string;\r\n    this.image = image;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      image.onload = function () {\r\n        canvas.width = image.width;\r\n        canvas.height = image.height;\r\n\r\n        context.drawImage(image, 0, 0, image.width, image.height);\r\n        const response = fillCanvas(context, image, canvas);\r\n\r\n        // Eğer fillCanvas bir değer dönüyorsa, onu resolve ile döndürün\r\n        if (response) {\r\n          resolve(response);\r\n        } else {\r\n          reject(\"fillCanvas did not return a value.\");\r\n        }\r\n      };\r\n    });\r\n  }\r\n\r\n  private fillCanvas(context: CanvasRenderingContext2D, image: HTMLImageElement, canvas: HTMLCanvasElement) {\r\n    this.data = context?.getImageData(0, 0, image.width, image.height).data;\r\n\r\n    var top: number = this.scanY(image, true) as number;\r\n    var bottom: number = this.scanY(image, false) as number;\r\n    var left: number = this.scanX(image, true) as number;\r\n    var right: number = this.scanX(image, false) as number;\r\n\r\n    var new_width = right - left;\r\n    var new_height = bottom - top;\r\n\r\n    canvas.width = new_width;\r\n    canvas.height = new_height;\r\n\r\n    context.drawImage(image, left, top, new_width, new_height, 0, 0, new_width, new_height);\r\n\r\n    const canvasURL = canvas.toDataURL(\"image/webp\", 1);\r\n    return canvasURL;\r\n  }\r\n\r\n  private scanX(image: HTMLImageElement, left: boolean) {\r\n    var offset = left ? 1 : -1;\r\n\r\n    for (var x = left ? 0 : image.width - 1; left ? x < image.width : x > -1; x += offset) {\r\n      for (var y = 0; y < image.height; y++) {\r\n        if (!this.isEmpty(this.getRGBA(x, y, image))) {\r\n          return x;\r\n        }\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  private scanY(image: HTMLImageElement, top: boolean) {\r\n    var offset = top ? 1 : -1;\r\n    console.log(\"scany\", top);\r\n\r\n    for (var y = top === true ? 0 : image.height - 1; top ? y < image.height : y > -1; y += offset) {\r\n      for (var x = 0; x < image.width; x++) {\r\n        if (!this.isEmpty(this.getRGBA(x, y, image))) {\r\n          return y;\r\n        }\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  private isEmpty(rgba: IRGBA) {\r\n    return rgba.alfa == 0 || (rgba.red == 255 && rgba.green == 255 && rgba.blue == 255);\r\n  }\r\n\r\n  private getRGBA(x: number, y: number, image: HTMLImageElement) {\r\n    return {\r\n      red: this.data[(image.width * y + x) * 4],\r\n      green: this.data[(image.width * y + x) * 4 + 1],\r\n      blue: this.data[(image.width * y + x) * 4 + 2],\r\n      alfa: this.data[(image.width * y + x) * 4 + 3],\r\n    };\r\n  }\r\n}\r\n"],"mappings":"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","names":[]}